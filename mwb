#! /usr/bin/env node
"use strict"

let a = process.argv[2]
let command = ['clean','dev','bundle','serve','init','initBare','postinstall']
if (!a || command.indexOf(a) < 0) return console.error('Need to supply an argument, either of:',command)


require('shelljs/global')

const path = require('path')

let op = {
	clean() {test('-e','build') && rm('-rf', 'build/*')},
	dev(){this.clean(); exec('node ' + __dirname + '/tool/devServerHot.js')},
	bundle(){this.clean(); exec('node ' + __dirname + '/tool/bundle.js')},
	serve(){exec('node ./build/server/serverBundle')},
	postinstall() {		
		try {
			var tmp = require(path.resolve('../../package.json'))					
		} catch (err) {
			var e = err
		}
		if (e) return
			
		if (!tmp.scripts) tmp.scripts = {}
		tmp.scripts.mwb = 'mwb'
		JSON.stringify(tmp,null,2).to('../../package.json')
		require('./template/ascii_cat.js').ascii_cat()
		console.log('To start with an express js server, type: npm run mwb init')
		console.log('Without an express js server, type: npm run mwb initBare')
		console.log()
		console.log()
	},
	initBare(){
		console.log(' * Creating src folder\n')
		mkdir('-p','src/client','src/shared','src/server')

		let template = __dirname + '/template/'
		cp(template + 'entryEmpty.js','src/client/entry.js')	
		cp(template + 'entryServer.js','src/server/entry.js')
		cp(template + 'entryEmpty.js','src/server/server.js')	
		cp(template + 'alias.json','src/alias.json')	
		cp(template + 'loaders.json','src/loaders.json')
		cp(template + 'loaders.json','src/plugins.json')

		//add scripts to the existing package.json file
		//make a copy
		console.log(' * Updating package.json file\n')
		let oldName = 'package.'+Date.now()+'.json'
		cp('./package.json',oldName)
		let tmp = require(path.resolve('package.json'))		
		if (!tmp.scripts) tmp.scripts = {}		
		tmp.scripts.dev = 'mwb dev'
		tmp.scripts.serve = 'node build/server/serverBundle'
		tmp.scripts.bundle = 'mwb bundle'
		tmp.scripts.clean = 'mwb clean'
		JSON.stringify(tmp,null,2).to('package.json')
		console.log(' * Boilerplate created, package.json file has been updated. The old package.json file has been renamed to',oldName,'\n')
	},
	init(){
		this.initBare()
		let template = __dirname + '/template/'
		cp('-f',template + 'expressServer.js','src/server/server.js')	
		console.log('Installing the latest version of express')
		exec('npm i express --save')
		console.log('Installing the latest version of compression')
		exec('npm i compression --save')
		console.log('Initiation completed, to start developing, type: npm run dev')
	}
}


op[a]()